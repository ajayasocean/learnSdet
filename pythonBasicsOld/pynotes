Learn Python:

Chapter 1: Getting Started with Python

1. Python is an expressive language.
2. Python is free and open source
3. The Python file extension is .py while bytecode file extension is .pyc
4. Python code is about one third of the size of equivalent C++ and Java code.
5. Python can be both dynamically and strongly typed--dynamically typed means it is a type of variable that is interpreted at runtime, which means, in Python, there is no need to define the type (int or float) of the variable.
6. Python 2 & Python 3
7. Major implementations include CPython, Jython, IronPython, MicroPython, and PyPy
8. To check version on of python in terminal type: "python2" or "python3"
9. To check default directory for python "which python2"
10. Python interactive shell is also known as Integrated Development Environment (IDLE)
11. Setting environment variables in Linux
        sh or ksh shell: Enter PATH="$PATH:/usr/local/bin/python" followed by pressing Enter

12. Escape sequence in Python
	Escape		Sequence Meaning
	\b		Backspace
	\a		Sound system bell
	\n		Newline
	\t		Horizontal tab
			The character
	'		Single quotation mark
	"		Double quotation mark

13. String concatenation
	Two strings can be joined using the '+' operator

14. Formatted output
	%d	integer
	%f	float
	%s	string

15. Indentation
 It is advisable to stick to only one type and follow the same across the whole code. If the indentation is not strictly implemented,
then code execution will throw an error

================================================

Chapter 2: Type Variables and Operators

1. In this chapter, you will learn about assignment statements, arithmetic operators, comparison
operators, assignment operators, bitwise operators, logical operators, membership operators and identity operators.

2.  A variable points to the value that is stored in memory. When you create a variable,
the interpreter will reserve some space in the memory to store values.

3. Depending on the data type of the variable,
the interpreter allocates memory and makes a decision to store a particular data type in the reserved memory.

4. Various data types, such as integers, decimals, or characters, can be stored by assigning different data types to the variables.

5. Python variables are usually dynamically typed, that is, the type of the variable is interpreted
during runtime and you need not specifically provide a type to the variable name, unlike what other programming languages require.

6. There are certain rules or naming conventions for naming variables. The following are the rules:
	a. Reserved key words such as if, else, and so on cannot be used for naming variables.
	b. Variable names can begin with _, $, or a letter.
	c. Variable names can be in lower case and uppercase.
	d. Variable names cannot start with a number.
	e. White space characters are not allowed in the naming of a variable.
You can assign values to the variable using = or assignment operator.
	Syntax:
	<variable name>= < expression >

Single assignment:

Here, we will illustrate the use of the assignment operator (=) with an example:

city='London' # A string variable assignment.
money = 100.75 # A floating point number assignment
count=4 #An integer assignment

In this case, we assigned three different values to three variables using the = operator.

Multiple assignment:

A single value can be assigned to several variables simultaneously. For example:
a = b = c = 1

-----------

Data types in Python:

There are many types of data, such as numbers, strings, character, images, and so on.

Data types can be broadly categorized into five different types, listed as follows:
	Numbers
	String
	Tuples
	List
	Dictionary

Numeric data types or numbers:
There are generally four numeric data types in Python. They are integers, long integers, floating point numbers, and complex numbers.

Integers and long integers:
Integers include zero, all of the positive whole numbers, and all of the negative whole numbers.


Initialization or variable defination:

The interpreter first checks the expression on the right hand side of the assignment operator and then binds the value with its variable name;
this process is termed as variable definition or initialization.

----------------------------------------To Be Continued------------------

int (Integer)
The int or integer data type ranges from -231 to (231-1); the leading minus sign shows the negative values.
Beyond these ranges, the interpreter will add L to indicate a long integer

Floating point numbers:
Numbers with certain places after the decimal point are referred to as floating point numbers in the programming language:
	a. The floating point number type ranges approximately from -10 to 10^308 and has 16 digits of precision.
	b. There are two ways to write a floating point number.
	   It can be written using ordinary decimal notation or scientific notation.
	   Scientific notation is often useful for mentioning very large numbers.

Complex numbers:
A complex number has both real and imaginary parts, and Python allows you to specify this data type in a very easy and convenient way.
Syntax:
<variable name>=complex(x,y)
OR
<variable name>=x+yj
Here, x is the real part and y is the imaginary part. Here, j plays the role of iota.

Here, we declare two variables to denote complex numbers.
One way to achieve is to use complex() method and the other way is to use the standard notation as used in mathematics.

In standard complex number notation, x+ij, i is used to denote the starting of the imaginary part and stands for iota.
j denotes the imaginary part. The credit for conceiving the idea of complex numbers goes to Italian mathematician Gerolamo Cardano in 1545.

iota is a number whose square is -1

iota = ùë†ùëûùëüùë°(‚àí1).

Boolean data type:
A Boolean data type generally has only two values 'True' or 'False'. Boolean data type is a sub type of integers.
Syntax:
<variable name>=<'True' or 'False'>
Boolean data types can be referred to as an on and off switch, which has only two values to chose from:
we try to compare the value of x with the value of y, and when we use the == operator, the value of the Boolean is returned as True

String data types
A Python string is a contiguous sequence of Unicode characters. Single quotes or double quotes can be used to denote a string,
as we saw in Chapter 1, Getting Started with Python. For multiline string representation, ''' or """ can be used.
Syntax:
<variable name>= <String sequence>
More details on strings, tuples, list, and dictionary will be covered in the coming chapters.

American Standard Code for Information Interchange (ASCII) character sets:
The succeeding table shows the mapping of the first 128 ASCII codes to character values.
The left column digits are the leftmost digits of the ASCII code. The top row's digits represent the rightmost digits.
For example, the ASCII code of character A would be 65.
ASCII was developed primarily for telegraph code. Bell labs brought out 7-bit teleprinter code for commercial promotion and official work on the
ASCII code began on October 6, 1960.

Conversion functions:
In order to convert a character value to ASCII code, the ord() function is used,
and for converting ASCII code to character, the chr() function is used.
Here, when we want to get the ASCII code for 'A', it shows 65, which you can easily get from the aforementioned table.
The letter 'A' can be located on the sixth row and fifth column; thus, its value is 65.
Likewise, we can get the letter corresponding to a particular ASCII code.

Arithmetic expressions:
Arithmetic expressions in any language comprise operands and operators.
For reference, x and y are used as operands having values 10 and 20, respectively.
The following table shows the precedence order:

Operator Description:
** Exponent: Performs exponential (power) calculations on operators
* Multiplication: Multiplies values on either side of the operator
/ Division: Divides the left-hand operand by the right-hand operand
% Modulus: Divides the left-hand operand by the right-hand operand and
returns the remainder
+ Addition: Adds values on either side of the operator
- Subtraction: Subtracts the right-hand operand from the left-hand operand

In an arithmetic expression, generally, the rule of Bracket, Of, Division, Multiplication,
Addition, and Subtraction (BODMAS) is followed, and operators have their own
precedence order. Exponentiation enjoys a higher precedence order, while addition and
subtraction have a lower precedence order.

The decreasing precedence order is as follows:
Exponent
Unary negation
Multiplication, division, modulus
Addition, subtraction
If operands are of the same data type, then the resulting value is also of that type.
However, addition of two int data types can produce a long integer.

Mixed mode arithmetic:
The arithmetic operation involving both integer and floating point numbers is called mixed mode arithmetic.
When each operand is of a different data type, the resulting value is of the more general type, and float is the more general type.

Mixed Mode Conversion:
In the preceding example, 11/2.0, the less general type integer, 11, is temporarily and automatically converted into float 11.0.
Then, the calculation is performed. It is called mixed mode conversion.

Type conversions:
4.77 is converted into 4. In order to convert 4.77 into the int data type, the int() function is used.
Likewise, if you want to convert into float, use the float() function.

-------------------------
Operators:
Python supports the following types of operators:
Arithmetic operators
Comparison operators
Assignment operators
Bitwise operators
Logical operators
Membership operators
Identity operators

Arithmetic operators:
Arithmetic expressions comprise operands and operators:
We have already discussed the precedence order of the operators.

Comparison operators
Like any other language, Python also supports comparison operators. Comparison
operators return True or False:

	Operator	 Description:
	==		 Checks the equality
	<		 Returns True if the left-hand side operand is less than the right-hand side operand
	>		 Returns True if the left-hand side operand is greater than the right-hand side operand
	<=		 Returns True if the left-hand side operand is less than or equal to the righthand side operand
	>=		 Returns True if the left-hand side operand is greater than or equal to the righthand side operand
	!=		 Returns True if the left-hand side operand is not equal to the right-hand side operand
	<>		 Returns True if the left-hand side operand is not equal to the right-hand side operand
